### ===================================================================
### 01 - 环境设置与用户认证
### ===================================================================

### 1. 注册四个核心角色的用户
# 依次运行以下四个请求

### @name registerCreator
POST {{host}}/api/auth/register
Content-Type: application/json

{

  "username": "creator",
  "email": "creator@example.com",
  "password": "password123",
  "displayName": "班级创建者",
  "name": "王老师",
  "phone": "15665277175"
}

###

### @name registerAdmin
POST {{host}}/api/auth/register
Content-Type: application/json

{
  "username": "admin",
  "email": "admin@example.com",
  "password": "password123",
  "displayName": "班级管理员",
  "name": "李助教",
  "phone": "13800138002"

}

###

### @name registerMemberA
POST {{host}}/api/auth/register
Content-Type: application/json

{
  "username": "memberA",
  "email": "memberA@example.com",
  "password": "password123",
  "displayName": "成员A",
  "name": "张同学",
  "phone": "13800138003"
}

###

### @name registerMemberB
POST {{host}}/api/auth/register
Content-Type: application/json

{
  "username": "memberB",
  "email": "memberB@example.com",
  "password": "password123",
  "displayName": "成员B",
  "name": "刘同学",
  "phone": "13800138004"
}

### ===================================================================
### 2. 登录所有用户以获取Tokens
### 请手动将下方每个请求响应中的 "accessToken" 复制到 http-client.private.env.json 文件中
### ===================================================================

### @name loginCreator
POST {{host}}/api/auth/login
Content-Type: application/json

{ "username": "creator", "password": "password123" }

###

### @name loginAdmin
POST {{host}}/api/auth/login
Content-Type: application/json

{ "username": "admin", "password": "password123" }

###

### @name loginMemberA
POST {{host}}/api/auth/login
Content-Type: application/json

{ "username": "memberA", "password": "password123" }

###

### @name loginMemberB
POST {{host}}/api/auth/login
Content-Type: application/json

{ "username": "memberB", "password": "password123" }

### ===================================================================
### 3. 额外测试：未注册用户不能登录（用于验证后端认证逻辑）
### ===================================================================

### @name loginUnknownUser_should_fail
POST {{host}}/api/auth/login
Content-Type: application/json

{ "username": "not_registered_user", "password": "doesnt_matter" }

### 预期: 401 或 403 响应 (认证失败)，响应体可能包含 { message: "..."} 或 { error: "..." }

### ===================================================================
### 4. 响应示例（参考）
### 说明: 不同后端实现可能返回不同字段名，请注意 token 字段可能为 token / accessToken / access_token
### ===================================================================

### 登录成功 - 示例 A (accessToken 字段)
HTTP/1.1 200 OK
Content-Type: application/json

{
  "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
  "user": {
    "id": 10,
    "username": "memberA",
    "displayName": "成员A",
    "email": "memberA@example.com"
  }
}

### 登录成功 - 示例 B (token 字段)
HTTP/1.1 200 OK
Content-Type: application/json

{
  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
  "user": {
    "id": 10,
    "username": "memberA",
    "name": "张同学"
  }
}

### 登录失败 - 示例 (未注册/密码错误)
HTTP/1.1 401 Unauthorized
Content-Type: application/json

{
  "message": "Invalid credentials"
}
### ===================================================================
### 02 - 班级管理与权限测试
###
### 前置条件: 必须先运行 01_setup_and_auth.http 并填充好环境文件
### ===================================================================

### 1. 创建者(creator)创建班级1
# @name createClass1
POST {{host}}/api/classes
Authorization: {{creator_token}}
Content-Type: application/json

{
  "name": "软件工程2024班",
  "description": "软件工程专业2024级主班级"
}

###
# !!! 手动操作: 运行完此请求后, 将响应中的班级ID (如1) 填入环境文件的 "class1_id" 字段 !!!
###

### 2. 管理员(admin)申请加入班级1
POST {{host}}/api/classes/{{class1_id}}/join
Authorization: {{admin_token}}
Content-Type: application/json

{ "joinReason": "申请成为本班助教" }

###

### 3. 创建者(creator)获取待审批列表 (应该能看到admin)
GET {{host}}/api/classes/{{class1_id}}/approvals
Authorization: {{creator_token}}

###

### 4. 创建者(creator)批准管理员(admin)的申请
# @name adminInfo
# 假设admin用户的ID是2, 请根据实际情况在数据库中确认
PUT {{host}}/api/classes/{{class1_id}}/approvals/23
Authorization: {{creator_token}}
Content-Type: application/json

{ "action": "APPROVE" }

###

### 5. 创建者(creator)将admin提升为管理员

PUT {{host}}/api/classes/{{class1_id}}/members/23/promote
Authorization: {{creator_token}}

###

### 6. 普通成员(memberA)尝试将admin降级 (预期失败, 403 Forbidden)

PUT {{host}}/api/classes/{{class1_id}}/members/23/demote
Authorization: {{memberA_token}}

###

### 7. 创建者(creator)查看自己的班级列表 (解决你的403问题)
# 这个请求现在应该能成功, 如果还是403, 说明SecurityService.isClassMember或相关逻辑有bug
GET {{host}}/api/classes/my
Authorization: {{creator_token}}

###

### 8. 获取班级1的成员列表 (应该包含creator和admin)
GET {{host}}/api/classes/{{class1_id}}/members
Authorization: {{admin_token}}

#多班级越权测试

### 9. 用户B创建班级2
# @name createClass2
POST {{host}}/api/classes
Authorization: {{memberB_token}}
Content-Type: application/json

{
  "name": "计算机科学与技术1班",
  "description": "计算机科学与技术专业2023级主班级"
}

###
### 10. 管理员(admin)申请加入班级2
POST {{host}}/api/classes/{{class2_id}}/join
Authorization: {{admin_token}}
Content-Type: application/json

{ "joinReason": "申请成为本班助教" }

###

### 11. 创建者(用户B)获取待审批列表 (应该能看到admin)
GET {{host}}/api/classes/{{class2_id}}/approvals
Authorization: {{memberB_token}}

###

### 12. 创建者(用户B)批准管理员(admin)的申请
# @name adminInfo
# 假设admin用户的ID是23, 请根据实际情况在数据库中确认
PUT {{host}}/api/classes/{{class2_id}}/approvals/23
Authorization: {{memberB_token}}
Content-Type: application/json

{ "action": "APPROVE" }

###
### 13. 用户A申请加入班级1
POST {{host}}/api/classes/{{class1_id}}/join
Authorization: {{memberA_token}}
Content-Type: application/json

{ "joinReason": "申请成为本班成员" }

###

### 14. 管理员批准用户A的申请
# @name adminInfo
# 假设admin用户的ID是23, 请根据实际情况在数据库中确认
PUT {{host}}/api/classes/{{class1_id}}/approvals/24
Authorization: {{admin_token}}
Content-Type: application/json

{ "action": "APPROVE" }

###
### 15. 用户A申请加入班级2
POST {{host}}/api/classes/{{class2_id}}/join
Authorization: {{memberA_token}}
Content-Type: application/json

{ "joinReason": "申请成为本班成员" }

###
### 15. 管理员批准用户A的申请（不成功）
# @name adminInfo
# 假设admin用户的ID是23, 请根据实际情况在数据库中确认
PUT {{host}}/api/classes/{{class2_id}}/approvals/24
Authorization: {{admin_token}}
Content-Type: application/json

{ "action": "APPROVE" }

###

### 16. 创建者(用户B)批准用户A的申请
# @name adminInfo
# 假设admin用户的ID是23, 请根据实际情况在数据库中确认
PUT {{host}}/api/classes/{{class2_id}}/approvals/24
Authorization: {{memberB_token}}
Content-Type: application/json

{ "action": "APPROVE" }

###
### 8. 获取班级2的成员列表 (应该包含creator和admin)
GET {{host}}/api/classes/{{class2_id}}/members
Authorization: {{memberB_token}}
###

#截至目前====创建者=====管理员===普通成员
#class1===creator====admin===memberA
#class2===memberB====null ===admin.memberA
### ===================================================================
### 03 - 任务管理与智能同步测试
###
### 前置条件: 必须先运行 01 和 02 脚本并填充好环境文件
### ===================================================================

### 1. 管理员(admin)在班级1创建任务
# @name createTaskInClass1
POST {{host}}/api/classes/{{class1_id}}/tasks
Authorization: {{admin_token}}
Content-Type: application/json

{
  "title": "完成第一章：软件工程概论",
  "courseName": "软件工程",
  "deadline": "2025-10-15T23:59:00"
}

###
@task1_id = 17
###

### 2. 普通成员(memberA)尝试在班级1创建任务 (预期失败, 403 Forbidden)
POST {{host}}/api/classes/{{class1_id}}/tasks
Authorization: {{memberA_token}}
Content-Type: application/json

{ "title": "这是一个不该成功的任务",
  "courseName": "软件工程",
  "deadline": "2025-10-15T23:59:00"
}

###

### 3. 成员A查看日历 (同步前, 应该看不到班级任务)
GET {{host}}/api/calendar?year=2025&month=10
Authorization: {{memberA_token}}

###
### 4 成员A创建个人任务
# @name createPersonalTask
POST {{host}}/api/tasks/personal
Authorization: {{memberA_token}}
Content-Type: application/json

{
  "title": "成员A个人任务",
  "description": "这是成员A的个人任务",
  "courseName": "计网",
  "deadline": "2025-10-10T23:59:00"
}

###
### 5. 成员A再次查看日历
GET {{host}}/api/calendar?year=2025&month=10
Authorization: {{memberA_token}}

###

### 6. 成员A同步班级1的任务（范围为月）
POST {{host}}/api/sync/class/{{class1_id}}?range=month
Authorization: {{memberA_token}}

###

### 5. 成员A再次查看日历 (同步后, 应该能看到班级任务了)
GET {{host}}/api/calendar?year=2025&month=10
Authorization: {{memberA_token}}

###
#截至目前：成员A有一个个人任务，class1有一个班级任务1，成员A已导入改班级任务

### 6. 成员A更新班级任务的个人状态
PUT {{host}}/api/tasks/{{task1_id}} /status
Authorization: {{memberA_token}}
Content-Type: application/json

{
"status": "IN_PROGRESS",
"personalDeadline": "2024-12-25T23:59:59",
"personalNotes": "我的个人备注"
}
###

### 7.管理员更新班级任务的截止日期2025-10-15T23:59:00->2025-10-20T23:59:00
PUT {{host}}/api/tasks/{{task1_id}}
Authorization: {{admin_token}}
Content-Type: application/json

{
  "description": "更新后的描述",
  "deadline": "2025-10-20T23:59:59",
  "title": "完成第一章：软件工程概论",
  "courseName": "软件工程"
}
###

### 8. 成员A查看日历，确认班级任务日期是否同步改变
GET {{host}}/api/calendar?year=2025&month=10
Authorization: {{memberA_token}}

{
  "development": {
    "host": "http://localhost:8080",
    "creator_token": "Bearer ",
    "admin_token": "Bearer ",
    "memberA_token": "Bearer ",
    "memberB_token": "Bearer ",
    "class1_id": "7",
    "class2_id": "8"
  }
}