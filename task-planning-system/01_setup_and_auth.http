### ===================================================================
### 01 - 环境设置与用户认证
### ===================================================================

### 1. 注册四个核心角色的用户
# 依次运行以下四个请求

### @name registerCreator
POST {{host}}/api/auth/register
Content-Type: application/json

{

  "username": "creator",
  "email": "creator@example.com",
  "password": "password123",
  "displayName": "班级创建者",
  "name": "王老师",
  "phone": "15665277175"
}

###

### @name registerAdmin
POST {{host}}/api/auth/register
Content-Type: application/json

{
  "username": "admin",
  "email": "admin@example.com",
  "password": "password123",
  "displayName": "班级管理员",
  "name": "李助教",
  "phone": "13800138002"

}

###

### @name registerMemberA
POST {{host}}/api/auth/register
Content-Type: application/json

{
  "username": "memberA",
  "email": "memberA@example.com",
  "password": "password123",
  "displayName": "成员A",
  "name": "张同学",
  "phone": "13800138003"
}

###

### @name registerMemberB
POST {{host}}/api/auth/register
Content-Type: application/json

{
  "username": "memberB",
  "email": "memberB@example.com",
  "password": "password123",
  "displayName": "成员B",
  "name": "刘同学",
  "phone": "13800138004"
}

### ===================================================================
### 2. 登录所有用户以获取Tokens
### 请手动将下方每个请求响应中的 "accessToken" 复制到 http-client.private.env.json 文件中
### ===================================================================

### @name loginCreator
POST {{host}}/api/auth/login
Content-Type: application/json

{ "username": "creator", "password": "password123" }

###

### @name loginAdmin
POST {{host}}/api/auth/login
Content-Type: application/json

{ "username": "admin", "password": "password123" }

###

### @name loginMemberA
POST {{host}}/api/auth/login
Content-Type: application/json

{ "username": "memberA", "password": "password123" }

###

### @name loginMemberB
POST {{host}}/api/auth/login
Content-Type: application/json

{ "username": "memberB", "password": "password123" }

### ===================================================================
### 3. 额外测试：未注册用户不能登录（用于验证后端认证逻辑）
### ===================================================================

### @name loginUnknownUser_should_fail
POST {{host}}/api/auth/login
Content-Type: application/json

{ "username": "not_registered_user", "password": "doesnt_matter" }

### 预期: 401 或 403 响应 (认证失败)，响应体可能包含 { message: "..."} 或 { error: "..." }

### ===================================================================
### 4. 响应示例（参考）
### 说明: 不同后端实现可能返回不同字段名，请注意 token 字段可能为 token / accessToken / access_token
### ===================================================================

### 登录成功 - 示例 A (accessToken 字段)
HTTP/1.1 200 OK
Content-Type: application/json

{
  "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
  "user": {
    "id": 10,
    "username": "memberA",
    "displayName": "成员A",
    "email": "memberA@example.com"
  }
}

### 登录成功 - 示例 B (token 字段)
HTTP/1.1 200 OK
Content-Type: application/json

{
  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
  "user": {
    "id": 10,
    "username": "memberA",
    "name": "张同学"
  }
}

### 登录失败 - 示例 (未注册/密码错误)
HTTP/1.1 401 Unauthorized
Content-Type: application/json

{
  "message": "Invalid credentials"
}
###
### 4. 获取当前用户信息 (需要认证)
# @name getCurrentUserRequest
GET http://localhost:8080/api/users/me
Authorization: {{memberA_token}}